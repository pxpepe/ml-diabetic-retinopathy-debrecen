def get_messidor_dataset():
    import pandas as pd
    from scipy.io import arff
    data = arff.loadarff('messidor_features.arff')
    dataset = pd.DataFrame(data[0])
    X = dataset.iloc[:, 0: 19].values
    y = dataset.iloc[:, 19].values

    return [X,y]

if __name__ == "__main__":
    import classifier_generator as cg
    from sklearn.externals import joblib
    from sklearn.metrics import roc_curve, auc
    import matplotlib.pyplot as plt
    
    # Importamos o conjunto de dados
    X, y = get_messidor_dataset()

    # Escalamos os atributos
    X = cg.feature_scaling(X)
    
    # O melhor resultado foi obtido em Gaussian Process tendo em conta todos os atributos
    classifier_file = 'all_classifiers/gaussian_process_accuracy.pkl'
    classifier = joblib.load(classifier_file) 
    
    # Dividimos o dataset e guardamos 20% para testes
    X_train, X_test, y_train, y_test = cg.split_dataset(X, y, test_size=.2)
    
    # predicted probabilities generated by sklearn classifier
    y_probas = classifier.fit(X_train, y_train).predict_proba(X_test)
    y_proba0 = y_probas[:,0]
    y_proba1 = y_probas[:,1]
    
    fpr, tpr, _ = roc_curve(y_test, y_proba1)
    roc_auc = auc(fpr, tpr)
    
    plt.figure()
    lw = 2
    plt.plot(fpr, tpr, color='darkorange',
             lw=lw, label='ROC (Ã¡rea = %0.2f)' % roc_auc)
    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver operating characteristic')
    plt.legend(loc="lower right")
    plt.show()